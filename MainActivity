package com.emrek52.namazapp;

import androidx.appcompat.app.ActionBar;
import androidx.appcompat.app.AppCompatActivity;

import androidx.appcompat.widget.Toolbar;

import android.app.AlarmManager;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.net.ConnectivityManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.Handler;
import android.os.SystemClock;
import android.speech.tts.TextToSpeech;
import android.util.JsonReader;
import android.view.View;
import android.webkit.HttpAuthHandler;
import android.widget.Adapter;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;


import com.onesignal.OneSignal;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.SQLOutput;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

public class MainActivity extends AppCompatActivity implements TextToSpeech.OnInitListener {

    ListView listView;
    TextToSpeech tts;
    boolean durum = true;
    DownloadData downloadData;
    String url;
    int gelenSaat, gelenDakika;
    String sabahSaatOku, ogleSaatOku, ikindiSaatOku, aksamSaatOku, yatsiSaatOku;
    String sabahOku, ogleOku, ikindiOku, aksamOku, yatsiOku;
    int sabahKalan, ogleKalan, ikindiKalan, aksamKalan, yatsiKalan;
    String sabah, ogle, ikindi, aksam, yatsi;
    final ArrayList<Namaz> namazDizi = new ArrayList<Namaz>();
    SharedPreferences sharedPreferences;
    public static String kaydetSabah, kaydetOgle, kaydetIkindi, kaydetAksam, kaydetYatsi;

    NamazAdapter namazAdapter;
    Toolbar toolbar;


    SimpleDateFormat actionBar = new SimpleDateFormat("dd.MM.yyyy : E");
    Date actionDate = new Date();

    boolean ilkDurum;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        listView = findViewById(R.id.activity_main_namazvakitleri);
        tts = new TextToSpeech(getApplicationContext(), this);
        sharedPreferences = this.getSharedPreferences("com.emrek52.namazapp", Context.MODE_PRIVATE);

        toolbar = findViewById(R.id.tool);
        toolbar.setSubtitle(actionBar.format(actionDate));
        toolbar.setSubtitleTextColor(Color.parseColor("#2D45D5"));

        setSupportActionBar(toolbar);

        Intent NotifyService = new Intent(this, MyNotifyService.class);
        startService(NotifyService);


        // OneSignal Initialization
        OneSignal.startInit(this)
                .inFocusDisplaying(OneSignal.OSInFocusDisplayOption.Notification)
                .unsubscribeWhenNotificationsAreDisabled(true)
                .init();


        ConnectivityManager cvm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        ilkDurum = sharedPreferences.getBoolean("durumu", false);

        if (cvm.getActiveNetworkInfo() != null && cvm.getActiveNetworkInfo().isAvailable() && cvm.getActiveNetworkInfo().isConnected())
            downloadData = new DownloadData();
        try {
            url = "http://ezanvakti.herokuapp.com/vakitler?ilce=9779";
            downloadData.execute(url);

        } catch (Exception e) {
            Toast.makeText(this, "İnternet Bağlantısı Bulunamadı!", Toast.LENGTH_SHORT).show();
        }


        kaydetSabah = sharedPreferences.getString("sabah", null);
        kaydetOgle = sharedPreferences.getString("ogle", null);
        kaydetIkindi = sharedPreferences.getString("ikindi", null);
        kaydetAksam = sharedPreferences.getString("aksam", null);
        kaydetYatsi = sharedPreferences.getString("yatsi", null);

        if (ilkDurum == true) {
            kalanSureBul();
            setNamazDizi();
            namazAdapter = new NamazAdapter(getApplicationContext(), namazDizi);
            if (listView != null) {
                listView.setAdapter(namazAdapter);
            }
        }

        System.out.println(ilkDurum);

        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

                convertToTextSpeech(position);

            }
        });


    }


    public int hesapla(String gelen) {

        int yeniDakika, yeniSaat, dönen;

        SimpleDateFormat bicim = new SimpleDateFormat("HH:mm");
        Date tarih = new Date();
        String[] mevcutSaatAyrıstırma = bicim.format(tarih).split(":");
        int MevcutSaat = Integer.parseInt(mevcutSaatAyrıstırma[0]);
        int MevcutDakika = Integer.parseInt(mevcutSaatAyrıstırma[1]);


        String[] saatAyrıstırma = gelen.split(":");
        gelenSaat = Integer.parseInt(saatAyrıstırma[0]);
        gelenDakika = Integer.parseInt(saatAyrıstırma[1]);
        if (gelenDakika >= MevcutDakika) {

            yeniDakika = gelenDakika - MevcutDakika;
            yeniSaat = gelenSaat - MevcutSaat;
        } else {
            yeniDakika = 60 - MevcutDakika + gelenDakika;
            yeniSaat = gelenSaat - MevcutSaat - 1;
        }

        yeniSaat = yeniSaat * 60;
        dönen = yeniDakika + yeniSaat;

        return dönen;
    }

    public void OkumaHesaplama() {
        sabahKalan = hesapla(kaydetSabah);
        sabahOku = "sabah namazının çıkmasına " + (sabahKalan / 60) + " saat" + (sabahKalan % 60) + " dakika kaldı";

        sabahSaatOku = "sabah namazı vakti saat" + (gelenSaat) + "  " + (gelenDakika);

        if (sabahKalan < 0) {
            sabahKalan = -1;
            sabahOku = "vakit geçti";
        }
        ogleKalan = hesapla(kaydetOgle);
        ogleOku = "öğle namazının çıkmasına " + (ogleKalan / 60) + " saat" + (ogleKalan % 60) + " dakika kaldı";
        ogleSaatOku = "öğle namazı vakti saat" + (gelenSaat) + "  " + (gelenDakika);

        if (ogleKalan < 0) {
            ogleKalan = -1;
            ogleOku = "vakit geçti";
        }
        ikindiKalan = hesapla(kaydetIkindi);
        ikindiOku = "ikindi namazının çıkmasına " + (ikindiKalan / 60) + " saat" + (ikindiKalan % 60) + " dakika kaldı";
        ikindiSaatOku = "ikindi namazı vakti saat" + (gelenSaat) + "  " + (gelenDakika);

        if (ikindiKalan < 0) {
            ikindiKalan = -1;
            ikindiOku = "vakit geçti";
        }
        aksamKalan = hesapla(kaydetAksam);
        aksamOku = "akşam namazının çıkmasına " + (aksamKalan / 60) + " saat" + (aksamKalan % 60) + " dakika kaldı";
        aksamSaatOku = "akşam namazı vakti saat" + (gelenSaat) + "  " + (gelenDakika);

        if (aksamKalan < 0) {
            aksamKalan = -1;
            aksamOku = "vakit geçti";
        }
        yatsiKalan = hesapla(kaydetYatsi);
        yatsiOku = "yatsı namazının çıkmasına " + (yatsiKalan / 60) + " saat" + (yatsiKalan % 60) + " dakika kaldı";
        yatsiSaatOku = "yatsı namazı vakti saat" + (gelenSaat) + "  " + (gelenDakika);

        if (yatsiKalan < 0) {
            yatsiKalan = -1;
            yatsiOku = "vakit geçti";
        }

    }

    public void kalanSureBul() {
        OkumaHesaplama();

    }


    public void setNamazDizi() {


        namazDizi.add(new Namaz("Sabah Namazı", kaydetSabah, sabahKalan, R.mipmap.sabah));
        namazDizi.add(new Namaz("Öğle Namazı", kaydetOgle, ogleKalan, R.mipmap.ogle));
        namazDizi.add(new Namaz("İkindi Namazı", kaydetIkindi, ikindiKalan, R.mipmap.ikindi));
        namazDizi.add(new Namaz("Akşam Namazı", kaydetAksam, aksamKalan, R.mipmap.aksam));
        namazDizi.add(new Namaz("Yatsı Namazı", kaydetYatsi, yatsiKalan, R.mipmap.yatsi));

    }

    @Override
    public void onInit(int status) {
        if (status == tts.SUCCESS) {
            int sonuc = tts.setLanguage(Locale.getDefault());

            if (sonuc == tts.LANG_MISSING_DATA || sonuc == tts.LANG_NOT_SUPPORTED) {
                Toast.makeText(getApplicationContext(), "This Language is Not Supported", Toast.LENGTH_SHORT).show();


            }

        } else {
            Toast.makeText(getApplicationContext(), "Unable to initialize!", Toast.LENGTH_SHORT).show();

        }
    }


    private class DownloadData extends AsyncTask<String, Void, String> {

        @Override
        protected String doInBackground(String... strings) {

            String result = ""; //işlenmiş veriler burada depolanır..
            URL url;
            HttpURLConnection httpURLConnection;

            try {

                url = new URL(strings[0]); // mainden gelen url...  (0. indiste ki)
                httpURLConnection = (HttpURLConnection) url.openConnection(); //bağlantıyı açma
                InputStream inputStream = httpURLConnection.getInputStream(); //okuma işlemi
                InputStreamReader inputStreamReader = new InputStreamReader(inputStream);

                int data = inputStreamReader.read();
                while (data > 0) {

                    char character = (char) data;
                    result += character;

                    data = inputStreamReader.read();
                }

                return result;
            } catch (Exception e) {
                return null;
            }


        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            //System.out.println("alınan data " + s);
            try {
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd.MM.yyyy");
                Date date = new Date();

                JSONArray jsonArray = new JSONArray(s);
                String vakit = "";
                for (int i = 0; i < jsonArray.length(); i++) {
                    String gecici = jsonArray.getString(i);
                    String[] yeniDizi = gecici.split(",");
                    String yeni = "";
                    for (int t = 0; t < yeniDizi.length; t++) {
                        yeni += yeniDizi[t];
                    }
                    String[] dizi2 = yeni.split(":");
                    for (int y = 0; y < dizi2.length; y++)
                        if (dizi2[y].contains(simpleDateFormat.format(date)))
                            vakit = gecici;
                }
                JSONObject jsonObject = new JSONObject(vakit);


                sabah = jsonObject.getString("Imsak");
                ogle = jsonObject.getString("Ogle");
                ikindi = jsonObject.getString("Ikindi");
                aksam = jsonObject.getString("Aksam");
                yatsi = jsonObject.getString("Yatsi");

                if (kaydetSabah != sabah && kaydetOgle != ogle && kaydetIkindi != ikindi && kaydetAksam != aksam && kaydetYatsi != yatsi) {
                    sharedPreferences.edit().putString("sabah", sabah).apply();
                    sharedPreferences.edit().putString("ogle", ogle).apply();
                    sharedPreferences.edit().putString("ikindi", ikindi).apply();
                    sharedPreferences.edit().putString("aksam", aksam).apply();
                    sharedPreferences.edit().putString("yatsi", yatsi).apply();
                }


                if (ilkDurum == false) {

                    kalanSureBul();
                    setNamazDizi();
                    namazAdapter = new NamazAdapter(getApplicationContext(), namazDizi);
                    if (listView != null) {
                        listView.setAdapter(namazAdapter);
                    }
                    ilkDurum = true;
                    sharedPreferences.edit().putBoolean("durumu", ilkDurum).apply();

                }


            } catch (JSONException e) {
                e.printStackTrace();
            }

        }
    }


    private void convertToTextSpeech(int position) {

        switch (position) {
            case 0:
                if (durum) {
                    tts.speak(sabahOku, tts.QUEUE_FLUSH, null);
                    durum = false;
                } else {
                    tts.speak(sabahSaatOku, tts.QUEUE_FLUSH, null);
                    durum = true;
                }
                break;
            case 1:
                if (durum) {
                    tts.speak(ogleOku, tts.QUEUE_FLUSH, null);
                    durum = false;
                } else {
                    tts.speak(ogleSaatOku, tts.QUEUE_FLUSH, null);
                    durum = true;
                }
                break;
            case 2:
                if (durum) {
                    tts.speak(ikindiOku, tts.QUEUE_FLUSH, null);
                    durum = false;
                } else {
                    tts.speak(ikindiSaatOku, tts.QUEUE_FLUSH, null);
                    durum = true;
                }
                break;
            case 3:
                if (durum) {
                    tts.speak(aksamOku, tts.QUEUE_FLUSH, null);
                    durum = false;
                } else {
                    tts.speak(aksamSaatOku, tts.QUEUE_FLUSH, null);
                    durum = true;
                }
                break;
            case 4:
                if (durum) {
                    tts.speak(yatsiOku, tts.QUEUE_FLUSH, null);
                    durum = false;
                } else {
                    tts.speak(yatsiSaatOku, tts.QUEUE_FLUSH, null);
                    durum = true;
                }
                break;


        }
    }

    public void goster() {


        kalanSureBul();
        namazDizi.clear();
        setNamazDizi();
        namazAdapter.clear();
        namazAdapter=new NamazAdapter(getApplicationContext(),namazDizi);
        listView.setAdapter(namazAdapter);



    }

}
